Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-02-12T12:40:55-05:00

====== Radare2 ======
Created Wednesday 12 February 2020

https://www.megabeets.net/a-journey-into-radare-2-part-1/
https://www.megabeets.net/a-journey-into-radare-2-part-2/


Open file in write mode
r2 -w <file>

Binary information:
rabin2 -I <binary>

Commands:
ie - Display entry point (Info Entrypoint)
i? - Display all commands starting with i (Information)
a? - Display all commands starting with a (Analysis)
s? - Display all Seeking commands
d? - Display all debugging commands
o? - Display file commands
s <function>: go to function
aa - Analyse All


===== File commands =====
oo+ : Open r/w



axt:
The 'axt' command is used to “find data/code references to this address” (see 'ax?'). '@@' is like foreach iterator sign, used to repeat a command over a list of offsets (see '@@?'), and 'str.*' is a wildcard for all the flags that start with 'str.'. This combination helps me not just to list the strings flags but also to list the function name, where it’s used and the referenced instruction. Make sure to select the strings flagspace (default, use 'fs *') before.

axt @@ str.*

afl: Analyse function list
pdf: Disassemble at current seek location (print disasembly flag)

===== Flag commands =====
f? - Show help
fs - Show flagspaces
fs <space> Select flagspace
f - Show flags in flagspace
f <namespace>.<flagname> @ address - Set flag on specified address, eg. f label.function_name @ 0xdeadbeef

===== Visual mode =====
V :enter visual mode
q: leave visual mode
n/N move over function
k/l move down/up
u/U undo/redo seek

===== Debugging =====
Debugging commands: d?
Breakpoint commands: db?
Memory commands: dm?

dc : Continue execution of all children
dcu <addr> : Continue until <addr>
dcu entry0 : Continue until entrypoint
dcr : Continue until ret

==== Breakpoints ====
db <addr|flag> : (debug breakpoint) Sets a breakpoint at the specified address or flag
db- <addr> : Remove breakpoint
db-* : Remove all breakpoint

==== Memory maps: ====
https://radare.gitbooks.io/radare2book/debugger/memory_maps.html
dm : Print memory maps
dm= : Print memory maps with fancy ascii art
dm. : Print memory map currently in use
dmm: List modules
dmi <lib> <symbol> : Lists address of <symbol> in <lib>

==== Nice stackview ====
pxr @ esp
prx @ [rbp - 0x28]  Disassembles the address [rbp - 0x28] is pointing to

==== Registers ====
dr* : Display registers



===== Patching =====
https://rayoflightz.github.io/linux/assembly/2019/03/26/Binary-patching-using-radare2.html


Workflow
1) Open
2) Do analysis
3) Assemble flag space
4) Find string references

===== Debugging program with stdin =====
Make file pattern.txt containing input, eg:
AAAAAAAAAAAAAAAAAAAAAAAAAA

Make file called profile.rr2 containing:
#!/usr/bin/rarun2
stdin=./pattern.txt

run with
 r2 -r profile.rr2 -d <binary>

== Run with pip: ==
r2 -i fun.py /bin/ls

===== Invoke debugger =====
r2 -d <pid> Attach to process
r2 -d <bin> Invoke new program

== Connect to remote session ==
r2 -d gdb://<host>:<port>
