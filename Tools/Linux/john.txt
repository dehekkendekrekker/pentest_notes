Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-25T14:51:33-05:00

====== john ======
Created Monday 25 October 2021

===== Description =====

* John the ripper
* Password cracker

===== Installation =====
Installed by default on kali

===== Usage =====
{{{code: lang="sh" linenumbers="False"
john [<options>] <passwordlist>
}}}



* John will store cracked passwords in [[~/.john/john.pot.]]
* To see the passwords, issue this command:
{{{code: lang="sh" linenumbers="False"
john --show <hash_file> [--format=<format>]
}}}

* It is important to executed this command from the directory where the cracking command was first given.
* Also you MUST specify the format when showing the passwords, if you did so when cracking

===== Options =====
{{{code: lang="texinfo" linenumbers="False"
--single[=SECTION[,..]]    "single crack" mode, using default or named rules
--single=:rule[,..]        same, using "immediate" rule(s)
--wordlist[=FILE] --stdin  wordlist mode, read words from FILE or stdin
                  --pipe   like --stdin, but bulk reads, and allows rules
--loopback[=FILE]          like --wordlist, but extract words from a .pot file
--dupe-suppression         suppress all dupes in wordlist (and force preload)
--prince[=FILE]            PRINCE mode, read words from FILE
--encoding=NAME            input encoding (eg. UTF-8, ISO-8859-1). See also
                           doc/ENCODINGS and --list=hidden-options.
--rules[=SECTION[,..]]     enable word mangling rules (for wordlist or PRINCE
                           modes), using default or named rules
--rules=:rule[;..]]        same, using "immediate" rule(s)
--rules-stack=SECTION[,..] stacked rules, applied after regular rules or to
                           modes that otherwise don't support rules
--rules-stack=:rule[;..]   same, using "immediate" rule(s)
--incremental[=MODE]       "incremental" mode [using section MODE]
--mask[=MASK]              mask mode using MASK (or default from john.conf)
--markov[=OPTIONS]         "Markov" mode (see doc/MARKOV)
--external=MODE            external mode or word filter
--subsets[=CHARSET]        "subsets" mode (see doc/SUBSETS)
--stdout[=LENGTH]          just output candidate passwords [cut at LENGTH]
--restore[=NAME]           restore an interrupted session [called NAME]
--session=NAME             give a new session the NAME
--status[=NAME]            print status of a session [called NAME]
--make-charset=FILE        make a charset file. It will be overwritten
--show[=left]              show cracked passwords [if =left, then uncracked]
--test[=TIME]              run tests and benchmarks for TIME seconds each
--users=[-]LOGIN|UID[,..]  [do not] load this (these) user(s) only
--groups=[-]GID[,..]       load users [not] of this (these) group(s) only
--shells=[-]SHELL[,..]     load users with[out] this (these) shell(s) only
--salts=[-]COUNT[:MAX]     load salts with[out] COUNT [to MAX] hashes
--costs=[-]C[:M][,...]     load salts with[out] cost value Cn [to Mn]. For
                           tunable cost parameters, see doc/OPTIONS
--save-memory=LEVEL        enable memory saving, at LEVEL 1..3
--node=MIN[-MAX]/TOTAL     this node's number range out of TOTAL count
--fork=N                   fork N processes
--pot=NAME                 pot file to use
--list=WHAT                list capabilities, see --list=help or doc/OPTIONS
--format=NAME              force hash of type NAME. The supported formats can
                           be seen with --list=formats and --list=subformats
}}}



===== Wordlist rules =====
{{{code: lang="texinfo" linenumbers="False"
/etc/john/john.conf : List.Rules:Wordlist
}}}


===== Examples =====

=== Cracking an SSH key ===
{{{code: lang="sh" linenumbers="False"
/usr/sbin/ssh2john ~/.ssh/id_rsa > id_rsa.hash
/usr/sbin/john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.hash
}}}

* Coverts an SSH private key to a JTR usable format
* Cracks the SSH password using the rockyou wordlist


=== Cracking [[/etc/shadow]] ===
{{{code: lang="sh" linenumbers="False"
unshadow /etc/passwd /etc/shadow > passwords.lst
john ./passwords.lst
}}}

* Combines [[/etc/passwd]] and [[/etc/shadow]] into something JTR usable
* Cracks the password using the default progression through modes

=== Restore a previous session ===
{{{code: lang="sh" linenumbers="False"
john -restore
}}}

* Restores a previously aborted run with CTRL+C

=== To check if any root (UID 0) accounts got cracked: ===
{{{code: lang="sh" linenumbers="False"
john --show --users=0 <passwordfile>
}}}


=== To display the root (username "root") account only: ===
{{{code: lang="sh" linenumbers="False"
john --show --users=0 *passwd* *.pwd
}}}


=== To display the root (username "root") account only: ===
{{{code: lang="sh" linenumbers="False"
john --show --users=root mypasswd
}}}


=== And finally, to check for privileged groups: ===
{{{code: lang="sh" linenumbers="False"
john --show --groups=0,1 mypasswd
}}}


=== Show cracked passwords for a certain format ===
{{{code: lang="sh" linenumbers="False"
john --show --format=<format> mypasswd
}}}


=== Cracking multiple files in single mode ===
{{{code: lang="sh" linenumbers="False"
john --single passwd1 passwd2
}}}



=== Create new wordlist based on base list + rules ===
{{{code: lang="sh" linenumbers="False"
john --wordlist=./word.lst --rules --stdout > output.lst
}}}

* Uses [[./word.lst]] as base
* Applies wordlist rules to permutations
* outputs to stdout and redirects to output.lst

