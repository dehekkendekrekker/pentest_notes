Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-03-24T12:22:19-05:00

====== Docker ======
Created Tuesday 24 March 2020

===== Overview =====
Docker provides compartimentalization through the use of images and containers. It tries to solve the problem of conflicting packages
by allowing containers to run seperate from the host system as well as eachother. This enables the container to  run a configuration tailor made for its purpose,
without conflicting with other parts of the system.

Docker relies heavily on the linux kernel for this functionality, especially the use of namespaces. 

Docker does not provide CPU emulation like QEMU does. So any images ran on the host system must be built for the host system's architecture.


===== Architecture =====
Docker uses a client  / server model. So there is a client and a daemon that does the heavy lifting like building and running containers.
The daemon can run on your own system, or run remotely

The client and the server communicate over a JSON API, unix socket or network interface

==== The daemon ====
The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. 
A daemon can also communicate with other daemons to manage Docker services.

==== The client ====
The docker client is the primary way of communication with the server. Commands issued on the client (docker run) are then sent to the server
which in turn carries them out. The docker client uses the docker API for communication. A client can communicate with more than one server.


==== Docker desktop ====
Seems like irrelevant blurp

==== Docker registries ====
A registry stores images. Docker hub is the default, public registry that anyone can use. You can also run you own registry

When you run the "docker pull" or "docker run" command, an image is pulled from the configured registry.
"docker push" will push your image to the configured registry

==== Docker objects ====

When you use Docker, you are creating and using images, containers, networks, volumes, plugins, and other objects. 

=== Images ===
Images are read-only templates containing instructions on how to build a container. An image can be based off another image, create a layercake of provided functionality.
To build an image, you'll need a DockerFile. The dockerfile contains instructions on how to build an image. Each instruction in the dockerfile creates another layer in the image.
You can for instance take a bare ubuntu image, and the add an instruction to install apache in the dockerfile. When the image is built, it will contain apache on top of the linux image.


=== Containers ===
A container is a runnable instance of an image. You can add storage and network to the container. You can make an image off its state.
A container is relatively well isolated from the host system
A container is defined by its base image as well as any configuration parameter you give it upon run.
When a container is removed, any changes to its state that is not persisted to storage, will  disappear




===== SEE =====
[[Tools:Linux:docker]]
