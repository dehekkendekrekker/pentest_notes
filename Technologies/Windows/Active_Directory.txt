Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-27T18:54:23-05:00

====== Active Directory ======
Created Wednesday 27 October 2021


===== Components =====

==== Domain Controller ====
The  most  important  component  is  the domain controller(DC) which is a Windows 2000-2019 server with the Active Directory Domain Services role  installed.


==== Domain ====
* A name, like corp.com
* Objects like users, computer, etc can be added to the domain

==== Organizational Units & Objects ====
* The aforementioned objects are organised using Organizational Units (OU)
* These are container like unites, like a filesystem to organize and group objects
* Computer Objects represent actual servers and workstations that are domain-joined (part of the domain)
* User Objects represent people in the domain
* Objects have properties according to their type.

An organization may have systems that are not domain-joined, eg internet-facing machines

===== Remarks =====
* Active Directory relies heavily on DNS. Often a DC will host a DNS that is authoritive for the domain.

===== Authentication =====

==== NTLM Authentication ====
Happens under the following circumstance
* The client is authenticating to a server using an IP address
* The client is authenticating to a server that belongs to a different Active Directory forest that has a legacy NTLM trust instead of a transitive inter-forest trust
* The client is authenticating to a server that doesn't belong to a domain
* No Active Directory domain exists (commonly referred to as "workgroup" or "peer-to-peer")
* Where a firewall would otherwise restrict the ports required by Kerberos (typically TCP 88)

=== 7 Steps ===
* The client computes the NTLM hash of the password.
* The client sends the username to the application server.
* The application server sends back a nonce (challenge)
* The client encrypts the nonce using the NTLM hash and sentds it back to the application server (Response)
* The response, username and nonce are sent to the Domain Controller
* The DC encrypts the nonce with NTLM hash belonging to the username and compares the result to Response
* If the response == calculation, access is granted.

=== Remarks ===
NTLM is a fast hashing algo. All 8 char passwords can be cracked in 2.5 hours, and all 9 char passwords can be cracked in 11 days using top of the line equipment

===== Kerberos Authentication =====

* Microsoft's primary authentication mechanism since Windos Server 2003.
* While NTLM authentication works through a principle of challenge and response, Windows-based Kerberos authentication uses a ticket system

==== Components ====
KDC - Key distribution center. This lives on the Domain Controller and runs on port 88 TCP/UDP. 
TGS - Ticket Granting Service. Service that handles requests for tickets. Lives on the KDC
User - The person requesting access to a service
AS - Application Server, the resource a user requests access to.

==== Encryption keys ====
There are several structures handled by Kerberos, as tickets. Many of those structures are encrypted or signed in order to prevent being tampered by third parties. These keys are the following:
* KDC or krbtgt key which is derivate from krbtgt account NTLM hash.
* User key which is derivate from user NTLM hash.
* Service key(B) which is derivate from the NTLM hash of service owner, which can be an user or computer account.
* Session key(A) which is negotiated between the user and KDC.
* Service session key to be use between user and service.


===== Steps =====

==== The User sends an authentication server request (AS_REQ) to the KDC(DC). ====
* This contains a timestamp that is encrypted with a hash derived from the username + password. 
* This prevents replay attacks
* If The KDC attempts to decrypt the hash. If the decryption is successful  and the timestamp is not already used, the authetication is considered successful.

==== The KDC sends back an authentication server reply (AS_REP). ====
This reply contains the following:
* A session key (A)  encrypted with the User's hash. The user can decrypt the session key(A) and use it to encrypt communication, since Kerberos is stateles
* A Ticket Granting Ticket (TGT). 
	* This TGT contains information about the User, sa. Group memberships, ip address and the Session Key(A)
	* This TGT is encrypted with a private key by the KDC. The client cannot decrypt this.
	* Is valid for 10 hours, gets renewed after without password entry requirement.
	* Can only be used on the machine it was created for
* Once the user receives the session key + TGT, auth is complete.

==== The user contacts the KDC again. This time with a Ticket Granting Service Request (TGS_REQ) ====
* This request contains the following:
	* timestamp + username (encrypted with session key(A))
	* TGT
	* SPN (Service Principal Name)  of the resource 

==== The Ticket Granting Service (TGS) on the KDC receives and processes the TGS_REQ ====
* It checks if the SPN exists in the domain.
* It decrypts the TGT using the private key only known to the KDC
* It uses the session key(A) obtained from the TGT to decrypt the user + timestamp
* The TGS performs the following checks:
	* The TGT must have a valid timestamp (no replay detected and the request has not expired).
	* The username from the TGS_REQ has to match the username from the TGT.
	* The client IP address needs to coincide with the TGT IP address

==== The TGS send back a reply Ticket Granting Service Reply (TGS_REP) ====
This reply contains 3 parts:
	* The SPN to which access has been granted
	* A session key(B) to be used between the client and the SPN
	* A service ticket containing the username and group memberships + new created session key(B)

* The SPN + Session key(B) are encrypted using Session Key(A)
* The service ticket is encrypted using the password hash of the service account registered with the SPN in question.

==== The user now sends an application request (APP_REQ) to the Application Server (AS) ====
* This request contains the following:
	* The user name + time stamp encrypted with Session Key(B)
	* The service ticket encrypted by the HASH of the SPN.

==== The AS now processes the request ====
* The service ticket is decrypted using the hash of the password of the service account associated with the SPN
* This yields session key(B) + username + group info.
* The session key(B) is used to decrypt the username + timestamp.
* If the request is not duplicate and has not expired and the username is the same as the one from the service ticket, the request is granted.

==== The AS send back "Authenticated" ====




===== Kerberos Tickets =====

==== Silver Ticket ====
* A silver ticket is a forget TGS service tickets, with group membership + privileges set arbitrarily
* This ticket can be used to all system running a service with the same SPN










===== SEE =====
[[LDAP]]
