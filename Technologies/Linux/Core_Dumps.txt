Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-12-09T13:44:00-05:00

====== Core Dumps ======
Created Thursday 09 December 2021


===== Forcing a core-dump =====

==== Make program crash ====
* If the program has a bug that can be used to crash it.

===== Use GDB =====
* Run the program and start a gdb session either:
{{{code: lang="texinfo" linenumbers="False"
gdb <program>
}}}

or
{{{code: lang="texinfo" linenumbers="False"
<run program>
gdb -p <pid>
}}}


Then in the gdb console:
{{{code: lang="texinfo" linenumbers="False"
generate-core-file [file]			# or
gcore [file]
}}}

* Produce a core dump of the inferior process. The optional argument file specifies the file name where to put the core dump. If not specified, the file name defaults to core.pid, where pid is the inferior process ID. 

===== Use kill =====
{{{code: lang="texinfo" linenumbers="False"
kill -s SIGSEGV <pid>   # or
kill -11 <pid>
}}}

* This sends a SIGSEGV signal to <pid>


===== Some enumeration regarding core-dumps =====

==== To find out where core dumpes are stored when generated: ====
{{{code: lang="texinfo" linenumbers="False"
cat /proc/sys/kernel/core_pattern
}}}

* It might show something like this:
{{{code: lang="texinfo" linenumbers="False"
|/usr/share/apport/apport %p %s %c %P
}}}

* In this case, a crash will be piped to the apport utility. So this means that crashes are going to be analyzed by Apport. Normally crashes are found in /var/crash, but may also be in /var/spool or /var/lib/systemd/coredump on other Linux distributions.

if the output is something like this:
{{{code: lang="texinfo" linenumbers="False"
core
}}}

* In this case, the coredump will be called core, and will be placed inside of the cwd of the dumping process.

==== Check ulimits ====
{{{code: lang="texinfo" linenumbers="False"
ulimit -Sc					# Returns soft-limit for core-dumps
ulimit -Hc					# Returns hard-limit for core-dumps
cat /proc/<pid>/limits		# Returns a nice overview of the limits of a running process
}}}

* ulimits must be big enough to hold a core-dump. It's best to set them to unlimited:
* Not that if the core-dump is piped to apport, the ulimit does not matter
{{{code: lang="texinfo" linenumbers="False"
ulimit -c unlimited
}}}


==== Check if SUID program will dump core ====
{{{code: lang="texinfo" linenumbers="False"
cat /proc/sys/fs/suid_dumpable
}}}

* 0: A core-dump will not be produced by a program that has changed credentials (setsuid, etc), or the read permission is not set.
* 1: All processes dump core when possible
* 2: Processes dump core when possible, but dump is root-readable only

This behaviour can be overriden by the the program itself with  the following C code:
{{{code: lang="texinfo" linenumbers="False"
#include <sys/prctl.h>

prctl(PR_SET_DUMPABLE, 1);
}}}


==== Apport crash locations ====
{{{code: lang="texinfo" linenumbers="False"
/var/crash/
/var/spool
/var/lib/systemd/coredump
find / -name "*.crash" 2>/dev/null			# Find 
}}}


===== Change core pattern =====
{{{code: lang="texinfo" linenumbers="False"
# sysctl -w kernel.core_pattern=core   # or 
# echo "core" > /proc/sys/kernel/core_pattern
}}}



===== Unpacking apport crash report =====
{{{code: lang="texinfo" linenumbers="False"
apport-unpack <crashfile> <target_dir>
cat <target_dir>/CoreDump | strings				# Find juicy info in core-dump
}}}





===== Core-dump checklist =====
* Check the core_pattern
* Check if the soft and -hardlimits of the running process, or to be run process are sufficient to generate a core-dump
* Check if the target-directory is writable
* Verify that the file system is writeable and have sufficient free space.
* If a sub directory named core exist in the working directory no core will be dumped.
* If a file named core already exist but has multiple hard links the kernel will not dump core.
* Verify the permissions on the executable, if the executable has the suid or sgid bit enabled core dumps will by default be disabled. The same will be the case if you have execute permissions but no read permissions on the file. (verify with /proc/sys/fs/suid_dumpable)
* Verify that the process has not changed working directory, core size limit, or dumpable flag.
* Some kernel versions cannot dump processes with shared address space (AKA threads). Newer kernel versions can dump such processes but will append the pid to the file name.
* The executable could be in a non-standard format not supporting core dumps. Each executable format must implement a core dump routine.
* The segmentation fault could actually be a kernel Oops, check the system logs for any Oops messages.
* The application called exit() instead of using the core dump handler. (Thanks Shane!)



===== SEE =====
* https://sourceware.org/gdb/onlinedocs/gdb/Core-File-Generation.html    # GDB Core-dump 
* https://wiki.ubuntu.com/Apport # apport
* https://fromdual.com/hunting-the-core
* https://linux-audit.com/understand-and-configure-core-dumps-work-on-linux/
* [[procfs]]
* https://man7.org/linux/man-pages/man5/core.5.html  # manpage
