Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-09-27T18:02:43-05:00

====== BadCharacters ======
Created Monday 27 September 2021

When dealing with binaries, some characters are not allowed in payloads, as in, the will truncate/mangle the payload or it'll get rejected altogether.
This is a list of discovered bad characters per technology

===== HTTP =====
| char | hex  | dec | reason                                                                                                              |
|:-----|:-----|:----|:--------------------------------------------------------------------------------------------------------------------|
| \\n  | 0x0A | 10  | Newlines are used together with carriage return the separate headers as wel as separate headers from the body       |
| \\r  | 0x0D | 13  | Carriage returns are used together with newlines to separate headers, as well as separate the headers from the body |
| %    | 0x25 | 37  | Is interpreted by webserver as the precursor to percent encoded byte                                                |
| &    | 0x26 | 38  | Used to indicate a parameter in query string                                                                        |
| +    | 0x2B | 43  | Used to encode a space un URI. Webserver will replace 0x2B with 0x20 (space)                                        |
| =    | 0x3D | 61  | Used to assign a value to a parameter in URI.                                                                       |


==== Remarks ====
* Some webservers reject any request containing characters with dec code > 128 as 400 Bad Request. **To resolve this, encode your payload in cp1252**
* There are maybe more bad characters when dealing with HTTP, as there are more reserved characters. However, the ones in the table have caused problems for sure. Add as you go along
* It might be that the table depends on webserver implementation. Always keep an eye out for more bad chars.

===== Tips =====
* Encode your payload using url encoding, using the CP775 charset

Create a range of bytes as such:
{{{code: lang="python3" linenumbers="True"
string = ""
for i in range(1,256):
    string += "\\x" + str(hex(i)).replace("0x", "").rjust(2, "0")

print(string)

}}}




===== See =====
[[Encoding]]
