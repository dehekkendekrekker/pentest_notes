Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-11T10:14:16-05:00

====== PLT&GOT ======
Created Monday 11 October 2021

===== PLT =====

PLT stand for Program Linkage Table.  This is a section in the ELF file that holds references to function of different modules that are linked into the program.
Since program execution only works with addresses, the program needs to know where to  jump to when an external (from different module) function is called.
At compile time, every function call will be towards an entry in the PLT.

Say, you want to call printf(). In assembly this woul be CALL <printf>. Since <printf> isn't a valid addresss, this will be replaces with printf's address in the PLT.

==== Remarks ====
* The PLT contains code. Specifically, a JMP instruction to the GOT.

==== Tips ====
Use this to get the address of the function in the PLT. ONLY use this in exploit code to execute said function
{{{code: lang="python" linenumbers="False"
elf.plt[func]
}}}



===== GOT =====
GOT stands for Global Offset Table. This is basically a table of address offsets of a module. The code for printf is locates at OFFSET x from LIBC's base address for example.
Now,when a program runs, the base address is assigned to a module by the linker(?) The address where the code for a function can be found is now base_address + offset.

==== Remarks ====
* The GOT is a map to the address where the function resides. In other words, a list of key -> value pairs.
* The keys are known at compile time, the values are filled in by the loader at runtime.

==== Tips ====
Use this to leak the address of the function within LIBC. elf in this case is the target binary
{{{code: lang="python" linenumbers="False"
elf.got[func]
}}}



===== Operation =====
When you program calls a function, it will jump to the function's address in the PLT. There, there is a jump instruction that will jump to the loader's code. The loader will the resolve
the address of the function, and replace the jump to the loader with a jump to the function. Pretty cool eh?
