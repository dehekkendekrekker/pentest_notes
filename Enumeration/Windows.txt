Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-20T17:50:22-05:00

====== Windows ======
Created Wednesday 20 October 2021

===== Enumerating users, system info and processes =====

{{{code: lang="texinfo" linenumbers="False"
whoami								# Displays the current session's username
net user <username>					# Displays extensive information about the useraccount
net user							# Displays a list of the user accounts on the system
hostname							# Displays the hostname of the target system
systeminfo							# Displays information about the system
tasklist /SVC						# Shows running processes. Does not list processes running under a privileged user
tasklist /V							# Shows running processes /w verbose information incl. account
sc queryex type=service state=all	# Lists services including their name
}}}



==== whoami ====
{{{code: lang="texinfo" linenumbers="False"
whoami /all					# Displays extended information about the logged in user
whoami /priv				# Displays the privileges
whoami /groups				# Displays the groups information
}}}

* Pay attention to the SeImpersonatePrivilege  and  SeAssignPrimaryTokenPrivilege privileges. These enable the [[AttackVectors:Windows:Exploits:Potatoes:Juicy Potato|JuicyPotato]] attack.

If whoami is not installed (ie Windows XP)
{{{code: lang="texinfo" linenumbers="False"
mkdir test
dir /q test
}}}

* This will tell you who you are

With powershell:
{{{code: lang="powershell" linenumbers="False"
Get-WmiObject win32_service | Select-Object Name, State, PathName | Where-Object {$_.State -like 'Running'}
}}}

* Lists running processes

==== Handy oneliners ====
{{{code: lang="sh" linenumbers="False"
systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System Type"
}}}

* Extracts the name of the OS, the version ans system archtitecture


===== Enumerating network =====
{{{code: lang="texinfo" linenumbers="False"
ipconfig /all									# Displays information about network interfaces
route print										# Prints routing table
netstat -ano									# Displays active connections
netsh advfirewall show currentprofile   		# Display firewall profile
netsh advfirewall firewall show rule name=all   # Display firewall rules
}}}

==== Remarks ====
* The presence of virtual interfaces indicates the presence of virtualization or AV
* A host with multiple interfaces connected to multiple networks can be used as a pivot into the other network


===== Enumerating scheduled tasks =====
{{{code: lang="sh" linenumbers="False"
schtasks /query /fo LIST /v						# Dumps a list of scheduled tasks
}}}


===== Enumerating installed programs, patch levels =====
{{{code: lang="texinfo" linenumbers="False"
wmic product get name,displayname,pathname,startmode,version,vendor						# Dumps a list of programs installed by WindowsInstaller.
wmic qfe get Caption, Description, HotFixID, InstalledOn									# Dumpa a list of updates applied to the system
wmic service get name,displayname,pathname,startmode |findstr /i "auto" |findstr /i /v "c:\windows"  # Dumps a list of auto-starting non-orthodox services
}}}

* Look for unquoted service paths in output

===== Enumerating world writable files =====
Use accesschk.exe:
{{{code: lang="sh" linenumbers="False"
accesschk.exe -uws "Everyone" "C:\Program Files" /accepteula
}}}


Use powershell:
{{{code: lang="powershell" linenumbers="False"
Get-ChildItem "C:\Program Files" -Recurse | Get-ACL | ?{$_.AccessToString -match "Everyone\sAllow\s\sModify"}
}}}


===== Enumerating (un)mounted disks =====
{{{code: lang="sh" linenumbers="False"
mountvol
}}}


===== Enumerating device drivers =====
{{{code: lang="powershell" linenumbers="False"
driverquery.exe /v /fo csv | ConvertFrom-CSV | Select-Object 'Display Name', 'Start Mode', Path
}}}

* Lists all drivers, but without version information
* Must be run in powershell

{{{code: lang="powershell" linenumbers="False"
Get-WmiObject Win32_PnPSignedDriver | Select-Object DeviceName, DriverVersion, Manufacturer | Where-Object {$_.DeviceName -like "*VMware*"}
}}}

* Powershell script to list all drivers + versions for WMware

===== Enumerating binaries that autoelevate =====
{{{code: lang="sh" linenumbers="False"
reg query HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer
reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Installer
}}}

* If either of those queries return a result and 0x01 is present, it's possible to craft an .msi file an run it as \SYSTEM


===== Figuring out integrity level of user account =====
{{{code: lang="sh" linenumbers="False"
whoami /groups
}}}

* This outputs a line with label in it, this indicate Medium or High integrity level

===== Automated Enumeration =====
* See [[Tools:Windows:windows-privesc-check]]
* See [[Tools:Windows:SysInternals:accesschk]]



===== Ping sweep =====
{{{code: lang="sh" linenumbers="False"
for /L %i in (1,1,255) do @ping -n 1 -w 200 a.b.c.%i > nul && echo a.b.c.%i
}}}



===== Pulling manifest from executable =====
* This manifest contains information about the required integritylevel and if it auto elevates
* If autoelevate == true, the program won't ask for a prompt when running
{{{code: lang="sh" linenumbers="False"
sigcheck -a -m C:\windows\system32\fodhelper.exe
}}}


===== Getting IP of host =====
{{{code: lang="sh" linenumbers="False"
nslookup <host>
}}}



===== SEE =====
[[Tools:Windows:whoami]]
[[Tools:Windows:windows-privesc-check]]
[[Tools:Windows:PowerShell]]
[[Tools:Windows:SysInternals:sigcheck]]
[[Tools:Windows:tasklist]]




