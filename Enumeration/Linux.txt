Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-20T17:50:27-05:00

====== Linux ======
Created Wednesday 20 October 2021


{{{code: lang="sh" linenumbers="False"
whoami							# Displays the current session's username
id								# Displays uid and gid id information of the groups the user belongs to
cat /etc/passwd 				# Displays a list of accounts on the system + additional information
hostname						# Displays the hostname of the target system
uname -a					    # Displays kernel version + architecture
cat /etc/issue					# Displays system info
ps -aux							# Displays running processes
cat /proc/version				# Displays OS + kernel version
cat /proc/version_signature		# Ubuntu: print kernel version
}}}

===== Remarks =====
* Presence of the www-data user indicates a webserver is likely installed

===== Network enumeration =====
{{{code: lang="sh" linenumbers="False"
ip a							# Displays interface information
route/routel					# Displays routing table
netstat/ss -anp 				# Displays active connections
}}}


==== Firewall enum ====
* Enumerating the firewall is a little harder on linux. The iptables-persistent package, if installed, stores the firewall configs in [[/etc/iptables.]] The files in the dir should be checked out for weak permissions so they might be read.
* Grepping the filesystem for "iptables", "iptables-save" or "iptables-restore"  might also lead to the file containing the firewall configuration


===== Enumerating scheduled tasks =====
{{{code: lang="texinfo" linenumbers="False"
ls -lah /etc/cron*				# Displays a listing of all scheduled tasks that are run according to their folder name
cat /etc/crontab				# Displays the system's crontab.Scripts in this file will often run as root. If we can edit the called script, we could use this for privesc
}}}




===== Enumerating installed programs, patch levels =====
On Debian based systems:
{{{code: lang="texinfo" linenumbers="False"
dpkg -l							# Dumps a list of installed programs
}}}



===== Enumerating world writable directories: =====
{{{code: lang="sh" linenumbers="False"
find / -writable -type d 2>/dev/null
}}}

* Finds all writable directories while redirecting errors to /dev/null

===== Enumerating (un)mounted disks =====
{{{code: lang="texinfo" linenumbers="False"
mount				#  Displays all mounted discs
cat /etc/fstab		#  Displays all discs that are mounted at boot
lsblk				#  Displays all block devices (discs + partitions
}}}


===== Enumerating modules =====
{{{code: lang="texinfo" linenumbers="False"
lsmod						# Lists status of kernel modules
/sbin/modinfo <module> 		# Shows info regarding <module>. Full pathname is required
}}}



===== Enumerating binaries that auto-elevate =====
{{{code: lang="texinfo" linenumbers="False"
find / -perm -u=s -type f 2>/dev/null				# Looks for files with the SUID bit set
}}}




===== Enumerating using procfs =====

==== Situation ====
You've done a port scan on your target, and there is some kind of weird service running on a port that won't talk back, no matter what you throw at it.
You're stuck, and the only way forward seems that service. If you have arbitrary read on the the host, you might be able to identify it!

==== Preconditions ====
* Arbitrary read on the filesystem, the /proc/<id> dir in particular.

==== Description ====
It boils down to querying the procfs in a brute-force fashion for the processes that have opened the socket you are interested in. The information you seek is contained here:
{{{code: lang="texinfo" linenumbers="False"
/proc/<pid>>/cmdline 
}}}

* This will gives you the full command line with which the process has been started. Keep in mind that the separator between the arguments is \x00, so everything will appear concatenated.

It might be that the service is started with default settings, in this case you might want to google, but alternatively, try the following:
Get this file
{{{code: lang="texinfo" linenumbers="False"
/proc/<pid>/net/tcp
}}}

This will get you output like this:
{{./pasted_image.png}}
* The local_address column holds the socket information in hex.

You can make shortlist of processes by using grep to look for the port you need in hex, ie:
{{{code: lang="texinfo" linenumbers="False"
grep -rnw '1F40'
}}}


You'll find that there are many processes that have something to do with that socket, but at least you'll be able to filter.
Using the pid shortlist, you can bruteforces for commandline again to narrow down your results.


===== Automatic enumeration =====
* See [[Tools:Linux:unix-privesc-check]]
* See [[Tools:Linux:SUID3NUM]]
* See [[Tools:Linux:enum4linux]]


===== SEE =====
[[Tools:Linux:netstat]]
[[Tools:Linux:find]]
[[Technologies:Linux:procfs]]
